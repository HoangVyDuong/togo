// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package task

import (
	"context"
	"github.com/HoangVyDuong/togo/internal/storages/task"
	"sync"
)

var (
	lockServiceMockCreateTask sync.RWMutex
	lockServiceMockDeleteTask sync.RWMutex
	lockServiceMockGetTasks   sync.RWMutex
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked Service
//         mockedService := &ServiceMock{
//             CreateTaskFunc: func(ctx context.Context, taskEntity task.Task) (int64, error) {
// 	               panic("mock out the CreateTask method")
//             },
//             DeleteTaskFunc: func(ctx context.Context, taskId int64) error {
// 	               panic("mock out the DeleteTask method")
//             },
//             GetTasksFunc: func(ctx context.Context, userId int64) ([]task.Task, error) {
// 	               panic("mock out the GetTasks method")
//             },
//         }
//
//         // use mockedService in code that requires Service
//         // and then make assertions.
//
//     }
type ServiceMock struct {
	// CreateTaskFunc mocks the CreateTask method.
	CreateTaskFunc func(ctx context.Context, taskEntity task.Task) (int64, error)

	// DeleteTaskFunc mocks the DeleteTask method.
	DeleteTaskFunc func(ctx context.Context, taskId int64) error

	// GetTasksFunc mocks the GetTasks method.
	GetTasksFunc func(ctx context.Context, userId int64) ([]task.Task, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateTask holds details about calls to the CreateTask method.
		CreateTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TaskEntity is the taskEntity argument value.
			TaskEntity task.Task
		}
		// DeleteTask holds details about calls to the DeleteTask method.
		DeleteTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TaskId is the taskId argument value.
			TaskId int64
		}
		// GetTasks holds details about calls to the GetTasks method.
		GetTasks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserId is the userId argument value.
			UserId int64
		}
	}
}

// CreateTask calls CreateTaskFunc.
func (mock *ServiceMock) CreateTask(ctx context.Context, taskEntity task.Task) (int64, error) {
	if mock.CreateTaskFunc == nil {
		panic("ServiceMock.CreateTaskFunc: method is nil but Service.CreateTask was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		TaskEntity task.Task
	}{
		Ctx:        ctx,
		TaskEntity: taskEntity,
	}
	lockServiceMockCreateTask.Lock()
	mock.calls.CreateTask = append(mock.calls.CreateTask, callInfo)
	lockServiceMockCreateTask.Unlock()
	return mock.CreateTaskFunc(ctx, taskEntity)
}

// CreateTaskCalls gets all the calls that were made to CreateTask.
// Check the length with:
//     len(mockedService.CreateTaskCalls())
func (mock *ServiceMock) CreateTaskCalls() []struct {
	Ctx        context.Context
	TaskEntity task.Task
} {
	var calls []struct {
		Ctx        context.Context
		TaskEntity task.Task
	}
	lockServiceMockCreateTask.RLock()
	calls = mock.calls.CreateTask
	lockServiceMockCreateTask.RUnlock()
	return calls
}

// DeleteTask calls DeleteTaskFunc.
func (mock *ServiceMock) DeleteTask(ctx context.Context, taskId int64) error {
	if mock.DeleteTaskFunc == nil {
		panic("ServiceMock.DeleteTaskFunc: method is nil but Service.DeleteTask was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		TaskId int64
	}{
		Ctx:    ctx,
		TaskId: taskId,
	}
	lockServiceMockDeleteTask.Lock()
	mock.calls.DeleteTask = append(mock.calls.DeleteTask, callInfo)
	lockServiceMockDeleteTask.Unlock()
	return mock.DeleteTaskFunc(ctx, taskId)
}

// DeleteTaskCalls gets all the calls that were made to DeleteTask.
// Check the length with:
//     len(mockedService.DeleteTaskCalls())
func (mock *ServiceMock) DeleteTaskCalls() []struct {
	Ctx    context.Context
	TaskId int64
} {
	var calls []struct {
		Ctx    context.Context
		TaskId int64
	}
	lockServiceMockDeleteTask.RLock()
	calls = mock.calls.DeleteTask
	lockServiceMockDeleteTask.RUnlock()
	return calls
}

// GetTasks calls GetTasksFunc.
func (mock *ServiceMock) GetTasks(ctx context.Context, userId int64) ([]task.Task, error) {
	if mock.GetTasksFunc == nil {
		panic("ServiceMock.GetTasksFunc: method is nil but Service.GetTasks was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserId int64
	}{
		Ctx:    ctx,
		UserId: userId,
	}
	lockServiceMockGetTasks.Lock()
	mock.calls.GetTasks = append(mock.calls.GetTasks, callInfo)
	lockServiceMockGetTasks.Unlock()
	return mock.GetTasksFunc(ctx, userId)
}

// GetTasksCalls gets all the calls that were made to GetTasks.
// Check the length with:
//     len(mockedService.GetTasksCalls())
func (mock *ServiceMock) GetTasksCalls() []struct {
	Ctx    context.Context
	UserId int64
} {
	var calls []struct {
		Ctx    context.Context
		UserId int64
	}
	lockServiceMockGetTasks.RLock()
	calls = mock.calls.GetTasks
	lockServiceMockGetTasks.RUnlock()
	return calls
}
