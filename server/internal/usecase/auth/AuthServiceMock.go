// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package auth

import (
	"context"
	"sync"
)

var (
	lockServiceMockAuth sync.RWMutex
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked Service
//         mockedService := &ServiceMock{
//             AuthFunc: func(ctx context.Context, userName string, password string) (uint64, error) {
// 	               panic("mock out the Auth method")
//             },
//         }
//
//         // use mockedService in code that requires Service
//         // and then make assertions.
//
//     }
type ServiceMock struct {
	// AuthFunc mocks the Auth method.
	AuthFunc func(ctx context.Context, userName string, password string) (uint64, error)

	// calls tracks calls to the methods.
	calls struct {
		// Auth holds details about calls to the Auth method.
		Auth []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserName is the userName argument value.
			UserName string
			// Password is the password argument value.
			Password string
		}
	}
}

// Auth calls AuthFunc.
func (mock *ServiceMock) Auth(ctx context.Context, userName string, password string) (uint64, error) {
	if mock.AuthFunc == nil {
		panic("ServiceMock.AuthFunc: method is nil but Service.Auth was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		UserName string
		Password string
	}{
		Ctx:      ctx,
		UserName: userName,
		Password: password,
	}
	lockServiceMockAuth.Lock()
	mock.calls.Auth = append(mock.calls.Auth, callInfo)
	lockServiceMockAuth.Unlock()
	return mock.AuthFunc(ctx, userName, password)
}

// AuthCalls gets all the calls that were made to Auth.
// Check the length with:
//     len(mockedService.AuthCalls())
func (mock *ServiceMock) AuthCalls() []struct {
	Ctx      context.Context
	UserName string
	Password string
} {
	var calls []struct {
		Ctx      context.Context
		UserName string
		Password string
	}
	lockServiceMockAuth.RLock()
	calls = mock.calls.Auth
	lockServiceMockAuth.RUnlock()
	return calls
}
